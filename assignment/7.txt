-- Step 1: Create the Users table with AUTO_INCREMENT for UserID
CREATE TABLE Users (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    UserName VARCHAR(100),
    Email VARCHAR(100),
    Role VARCHAR(50)
);

-- Step 2: Create the AuditLogs table
CREATE TABLE AuditLogs (
    LogID INT AUTO_INCREMENT PRIMARY KEY,
    Action VARCHAR(255),
    Timestamp DATETIME
);

-- Step 3: Create the stored procedure to insert a user and log the action
DELIMITER $$

CREATE PROCEDURE insert_user (
    IN p_user_name VARCHAR(100),
    IN p_email VARCHAR(100),
    IN p_role VARCHAR(50)
)
BEGIN
    -- Insert a new user into the Users table
    INSERT INTO Users (UserName, Email, Role)
    VALUES (p_user_name, p_email, p_role);

    -- Log the action in the AuditLogs table
    INSERT INTO AuditLogs (Action, Timestamp)
    VALUES (CONCAT('User Inserted: ', p_user_name), NOW());
END $$

DELIMITER ;

-- Step 4: Call the insert_user procedure
CALL insert_user('Alice Johnson', 'alice@example.com', 'Student');
CALL insert_user('Bob Smith', 'bob@example.com', 'Faculty');

-- Step 5: View the Users and AuditLogs tables
SELECT * FROM Users;
SELECT * FROM AuditLogs;

-- Step 6: Create a function to get the total user count
DELIMITER $$

CREATE FUNCTION get_user_count()
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE total_users INT;

    -- Calculate the total number of users
    SELECT COUNT(*) INTO total_users FROM Users;

    -- Return the count
    RETURN total_users;
END $$

DELIMITER ;

-- Step 7: Call the get_user_count function
SELECT get_user_count() AS TotalUsers;
